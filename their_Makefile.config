## Refer to http://caffe.berkeleyvision.org/installation.html
# Contributions simplifying and improving our build system are welcome!

# DEBUG := 1

# cuDNN acceleration switch (uncomment to build with cuDNN).
USE_CUDNN := 0

# CPU-only switch (uncomment to build without GPU support).
# CPU_ONLY := 1

# To customize your choice of compiler, uncomment and set the following.
# N.B. the default for Linux is g++ and the default for OSX is clang++
# CUSTOM_CXX := g++

# CUDA directory contains bin/ and lib/ directories that we need.
#CUDA_DIR := /usr/local/cuda
CUDA_DIR := /misc/software-lin/lmbsoft/cuda-6.5.14-x86_64

# On Ubuntu 14.04, if cuda tools are installed via
# "sudo apt-get install nvidia-cuda-toolkit" then use this instead:
# CUDA_DIR := /usr

# CUDA architecture setting: going with all of them.
# For CUDA < 6.0, comment the *_50 lines for compatibility.
CUDA_ARCH := -gencode arch=compute_20,code=sm_20 \
		-gencode arch=compute_20,code=sm_21 \
		-gencode arch=compute_30,code=sm_30 \
		-gencode arch=compute_35,code=sm_35 \
		-gencode arch=compute_50,code=sm_50 \
		-gencode arch=compute_50,code=compute_50

# BLAS choice:
# atlas for ATLAS (default)
# mkl for MKL
# open for OpenBlas
BLAS := atlas
# Custom (MKL/ATLAS/OpenBLAS) include and lib directories.
# Leave commented to accept the defaults for your choice of BLAS
# (which should work)!
# BLAS_INCLUDE := /path/to/your/blas
# BLAS_LIB := /path/to/your/blas

# This is required only if you will compile the matlab interface.
# MATLAB directory should contain the mex binary in /bin.
MATLAB_DIR := /misc/software-lin/matlabR2013a/
# MATLAB_DIR := /usr/local
# MATLAB_DIR := /Applications/MATLAB_R2012b.app

# NOTE: this is required only if you will compile the python interface.
# We need to be able to find Python.h and numpy/arrayobject.h.
PYTHON_INCLUDE := /usr/include/python2.7 \
		/usr/lib/python2.7/dist-packages/numpy/core/include
# Anaconda Python distribution is quite popular. Include path:
# PYTHON_INCLUDE := $(HOME)/anaconda/include \
		# $(HOME)/anaconda/include/python2.7 \
		# $(HOME)/anaconda/lib/python2.7/site-packages/numpy/core/include

# We need to be able to find libpythonX.X.so or .dylib.
PYTHON_LIB := /usr/lib
# PYTHON_LIB := $(HOME)/anaconda/lib

# Whatever else you find you need goes here.
#INCLUDE_DIRS := $(PYTHON_INCLUDE) /usr/local/include
#LIBRARY_DIRS := $(PYTHON_LIB) /usr/local/lib /usr/lib

INCLUDE_DIRS := \
  /misc/lmbraid15/hackathon/common/software-root/include \
  /misc/software-lin/lmbsoft/boost_1_56_0/ \
  /misc/software-lin/lmbsoft/glog/include \
  /misc/software-lin/lmbsoft/gflags-2.1.1/build/include \
  /misc/software-lin/lmbsoft/mdb-mdb/libraries/liblmdb \
  $(PYTHON_INCLUDE) \
  /usr/local/include

LIBRARY_DIRS := \
  /misc/lmbraid15/hackathon/common/software-root/lib \
  /misc/software-lin/lmbsoft/boost_1_56_0/stage/lib \
  /misc/software-lin/lmbsoft/glog/lib \
  /misc/software-lin/lmbsoft/gflags-2.1.1/build/lib \
  /misc/software-lin/lmbsoft/mdb-mdb/libraries/liblmdb \
  $(PYTHON_LIB) \
  /usr/local/lib


LDFLAGS += -Wl,-rpath,/misc/software-lin/lmbsoft/boost_1_56_0/stage/lib \
-Wl,-rpath,/misc/lmbraid15/hackathon/common/software-root/lib \
-Wl,-rpath,/misc/software-lin/lmbsoft/glog/lib \
-Wl,-rpath,/misc/software-lin/lmbsoft/gflags-2.1.1/build/lib \
-Wl,-rpath,/misc/software-lin/lmbsoft/mdb-mdb/libraries/liblmdb \
-Wl,-rpath,/misc/software-lin/lmbsoft/cuda-6.5.14-x86_64/lib64


BUILD_DIR := build
DISTRIBUTE_DIR := distribute

# Uncomment for debugging. Does not work on OSX due to https://github.com/BVLC/caffe/issues/171
# DEBUG := 1

# The ID of the GPU that 'make runtest' will use to run unit tests.
TEST_GPUID := 0

# enable pretty build (comment to see full commands)
Q ?= @ 
